#ifndef MARCO_CODEGEN_TRANSFORMS_SOLVERS_COMMON_H
#define MARCO_CODEGEN_TRANSFORMS_SOLVERS_COMMON_H

#include "marco/Dialect/Modelica/ModelicaDialect.h"
#include "marco/Dialect/Simulation/SimulationDialect.h"
#include "marco/Codegen/Analysis/DerivativesMap.h"
#include "marco/VariableFilter/VariableFilter.h"
#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
#include "mlir/Conversion/LLVMCommon/TypeConverter.h"
#include "mlir/Pass/Pass.h"
#include <string>

namespace mlir::modelica::impl
{
  /// The purpose of this class is to generate the algorithmic functions that
  /// compose the simulation. The usage of such functions is delegated to the
  /// runtime library, which is statically linked with the code generated by
  /// the compiler. This decoupling allows to relieve the code generation phase
  /// from the generation of functions that are independent from the model
  /// being processed.
  class ModelSolver
  {
    public:
      ModelSolver();

      virtual ~ModelSolver();

    protected:
      ScheduleOp createSchedule(
          mlir::RewriterBase& rewriter,
          mlir::SymbolTableCollection& symbolTableCollection,
          mlir::ModuleOp moduleOp,
          mlir::Location loc,
          llvm::StringRef scheduleName,
          llvm::ArrayRef<SCCOp> SCCs);

      EquationTemplateOp cloneEquationTemplateOutsideModel(
          mlir::RewriterBase& rewriter,
          mlir::SymbolTableCollection& symbolTableCollection,
          mlir::ModuleOp moduleOp,
          EquationTemplateOp equationTemplateOp);

    mlir::LogicalResult replaceLocalWithSimulationVariables(
          mlir::RewriterBase& rewriter,
          mlir::SymbolTableCollection& symbolTableCollection,
          mlir::ModuleOp moduleOp,
          mlir::Operation* op);

      /// Convert an equation template into a function that can be called with
      /// some specific indices.
      RawFunctionOp createEquationTemplateFunction(
          mlir::OpBuilder& builder,
          mlir::ModuleOp moduleOp,
          mlir::SymbolTableCollection& symbolTableCollection,
          EquationTemplateOp equationTemplateOp,
          uint64_t viewElementIndex,
          llvm::StringRef functionName,
          const llvm::StringMap<GlobalVariableOp>& localToGlobalVariablesMap);

    protected:
      mlir::LogicalResult callEquationTemplateFunction(
          mlir::OpBuilder& builder,
          mlir::Location loc,
          MatchedEquationInstanceOp equationOp,
          RawFunctionOp rawFunctionOp) const;
  };
}

#endif // MARCO_CODEGEN_TRANSFORMS_SOLVERS_COMMON_H
