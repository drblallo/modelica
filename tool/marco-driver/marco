#!/usr/bin/env bash

SCRIPT_PATH=$(dirname "${BASH_SOURCE[0]}")
TEMPORARY_DIR=""

INPUT_FILES=()
OPTIONS=()
OUTPUT_FILE=""

LIBS_PATHS=()
LIBS_PATHS_DEFAULT="@RUNTIME_LIBS_PATHS@"

SIMULATION_LIBS="@SIMULATION_LIBS@"
EXTRA_LINK_FLAGS="@EXTRA_LINK_FLAGS@"

SOLVER="euler-forward"

SOLVER_LIB=""
DRIVER_LIB=""

PRINT_HELP="False"
PRINT_VERSION="False"
COMPILE_ONLY="False"
SHOULD_LINK="True"

parse_args()
{
  while [ "${1:-}" != "" ]; do
      # CASE 1: Compiler option
      if [[ "${1:0:1}" == "-" ]] ; then
        # Output file
        if [[ "$1" == "-o" ]] ; then
          shift
          OUTPUT_FILE="$1"
          shift
          continue
        fi

        # Library search path
        if [[ "$1" == "-L" ]] ; then
          shift
          LIBS_PATHS+=("$1")
          shift
          continue
        fi

        # Solvers
        if [[ "$1" == "--solver"* ]] ; then
          OPTIONS+=("$1")
          SOLVER="${1:9}"
          shift
          continue
        fi

        # This is a regular option, just add it to the list.
        OPTIONS+=("$1")

        case $1 in
          --help)
            PRINT_HELP="True"
            ;;
          --version)
            PRINT_VERSION="True"
            ;;
          -c)
            COMPILE_ONLY="True"
            SHOULD_LINK="False"
            ;;
          -S)
            COMPILE_ONLY="True"
            SHOULD_LINK="False"
            ;;
          --init-only | --emit-flattened | --emit-ast)
            SHOULD_LINK="False"
            ;;
          --emit-mlir | --emit-llvm-ir | --emit-llvm-bc)
            COMPILE_ONLY="True"
            SHOULD_LINK="False"
            ;;
        esac

        shift
        continue

      # CASE 2: A regular file
      elif [[ -f "$1" ]]; then
        INPUT_FILES+=("$1")
        shift
        continue

      else
        # CASE 3: Unsupported
        echo "ERROR: unrecognised option format: \`$1\`. Perhaps non-existent file?"
        exit 1
      fi
  done
}

cleanup()
{
  if [[ $TEMPORARY_DIR != "" ]]; then
    rm -rf "$TEMPORARY_DIR"
  fi
}

main()
{
  parse_args "$@"

  if [[ $PRINT_HELP == "True" ]]; then
    marco-driver --help
    exit 0
  fi

  if [[ $PRINT_VERSION == "True" ]]; then
    marco-driver --version
    exit 0
  fi

  TEMPORARY_DIR=$(mktemp -d)

  # Create the flags to set the library search paths and the rpath
  LIBS_PATHS_FLAGS=()
  RPATHS=()

  # First add the user-provided paths
  for path in "${LIBS_PATHS[@]}"
  do
    LIBS_PATHS_FLAGS+=("-L$path")
    RPATHS+=("$path")
  done

  # Then add the default ones
  for path in "${LIBS_PATHS_DEFAULT[@]}"
  do
    LIBS_PATHS_FLAGS+=("-L$path")
    RPATHS+=("$path")
  done

  RPATH_FLAG="-Wl,-rpath,"
  RPATH_SEPARATOR=""

  for path in "${RPATHS[@]}"; do
      RPATH_FLAG="${RPATH_FLAG}${RPATH_SEPARATOR}${path}"
      RPATH_SEPARATOR=':'
  done

  SIMULATION_LIBS_FLAGS=()

  # Create the flags to link the libraries
  for i in $SIMULATION_LIBS
  do
    SIMULATION_LIBS_FLAGS+=("-l$i")
  done

  if [[ "$SOLVER" == "euler-forward" ]] ; then
    SOLVER_LIB="-lMARCORuntimeSolversEulerForward"
    DRIVER_LIB="-lMARCORuntimeDriverEulerForward"
  elif [[ "$SOLVER" == "ida" ]] ; then
    SOLVER_LIB="-lMARCORuntimeSolversIDA"
    DRIVER_LIB="-lMARCORuntimeDriverIDA"
  else
    echo "Invalid solver"
    exit 1
  fi

  # Create the object file
  ${SCRIPT_PATH}/marco-driver "${OPTIONS[@]}" "${INPUT_FILES[@]}" -o "$TEMPORARY_DIR/simulation.o"
  resultCode=$?

  if [ $resultCode -ne 0 ]; then
    echo "Compilation error"
    cleanup
    exit $resultCode
  fi

  if [[ $COMPILE_ONLY == "True" ]]; then
    if [[ $OUTPUT_FILE == "-" ]]; then
      cat "$TEMPORARY_DIR/simulation.o"
    else
      mv "$TEMPORARY_DIR/simulation.o" "$OUTPUT_FILE"
    fi
    cleanup
    exit 0
  fi

  if [[ $SHOULD_LINK == "True" ]]; then
    if [[ $OSTYPE == 'darwin'* ]]; then
      c++ -o "$OUTPUT_FILE" $RPATH_FLAG "$TEMPORARY_DIR/simulation.o" "-L${SCRIPT_PATH}/../lib" -Xlinker,--start-group -lMARCORuntime -lMARCORuntimeDriverKINSOL -lMARCORuntimePrinterCSV "${SOLVER_LIB}" "${DRIVER_LIB}" -lMARCORuntimeSupport -lMARCORuntimeCLI -lMARCORuntimeModeling -lMARCORuntimeMultithreading -lMARCORuntimeProfiling -Xlinker,--end-group "${LIBS_PATHS_FLAGS[@]}" "${SIMULATION_LIBS_FLAGS[@]}" "${EXTRA_LINK_FLAGS}"
    else
      c++ -o "$OUTPUT_FILE" $RPATH_FLAG "$TEMPORARY_DIR/simulation.o" "-L${SCRIPT_PATH}/../lib" -Wl,--start-group -lMARCORuntime -lMARCORuntimeSupport -lMARCORuntimeDriverKINSOL -lMARCORuntimePrinterCSV "${SOLVER_LIB}" "${DRIVER_LIB}" -lMARCORuntimeSupport -lMARCORuntimeCLI -lMARCORuntimeModeling -lMARCORuntimeMultithreading -lMARCORuntimeProfiling "${LIBS_PATHS_FLAGS[@]}" -Wl,--end-group "${SIMULATION_LIBS_FLAGS[@]}" "${EXTRA_LINK_FLAGS}"
    fi

    resultCode=$?

    if [ $resultCode -ne 0 ]; then
      echo "Link error"
      cleanup
      exit $resultCode
    fi
  fi

  cleanup
  exit 0
}

main "${@}"
