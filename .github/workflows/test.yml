name: CI

on: [push]

jobs:
  build-and-test:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: marco

      - name: Create package
        run: tar -czvf marco.tar.gz marco

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{secrets.SSH_KEY}}

      - name: Save server fingerprint
        run: echo "$SSH_FINGERPRINT" > /home/runner/.ssh/known_hosts
        env:
          SSH_FINGERPRINT: ${{secrets.SERVER_FINGERPRINT}}

      - name: Create temporary directory
        id: create-temp-dir
        run: echo "TEMP_DIR=$(ssh ${{secrets.SERVER_USERNAME}}@${{secrets.SERVER_ADDRESS}} mktemp -d)" >> $GITHUB_ENV

      - name: Copy package to server
        id: copy
        run: scp marco.tar.gz ${{secrets.SERVER_USERNAME}}@${{secrets.SERVER_ADDRESS}}:${{env.TEMP_DIR}}/marco.tar.gz
        continue-on-error: true

      - name: Build
        id: build
        if: steps.copy.outcome == 'success'
        run: ssh ${{secrets.SERVER_USERNAME}}@${{secrets.SERVER_ADDRESS}} sh ci.sh ${{env.TEMP_DIR}} marco.tar.gz
        continue-on-error: true

      - name: Run regression tests
        id: regression-tests
        if: steps.build.outcome == 'success'
        run: ssh ${{secrets.SERVER_USERNAME}}@${{secrets.SERVER_ADDRESS}} cd ${{env.TEMP_DIR}}/build '&&' ninja check
        continue-on-error: true

      - name: Run unit tests
        id: unit-tests
        if: steps.build.outcome == 'success'
        run: ssh ${{secrets.SERVER_USERNAME}}@${{secrets.SERVER_ADDRESS}} cd ${{env.TEMP_DIR}}/build '&&' ninja test
        continue-on-error: true

      - name: Clean remote files
        if: steps.create-temp-dir.outcome == 'success'
        run: ssh ${{secrets.SERVER_USERNAME}}@${{secrets.SERVER_ADDRESS}} rm -rf ${{env.TEMP_DIR}}

      - name: Check on failures
        if: steps.regression-tests.outcome != 'success' || steps.unit-tests.outcome != 'success'
        run: exit 1

# Old steps to run tests on Github:
#steps:
#  - uses: actions/checkout@v2
#  - name: fetch libboost
#    run: sudo apt-get install libboost-all-dev
#  - name: fetch llvm key
#    run:  wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add
#  - name: add apt repo
#    run: sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'
#  - name: install llvm
#    run: sudo apt install libllvm-11-ocaml-dev libllvm11 llvm-11 llvm-11-dev llvm-11-doc llvm-11-examples llvm-11-runtime clang-11 clang-tools-11 clang-11-doc libclang-common-11-dev libclang-11-dev libclang1-11
#  - name: collect-dependencies
#    run: git submodule update --recursive --init
#  - name: build
#    run: mkdir build && cd build && cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang ../ && make all -j4 && make test
