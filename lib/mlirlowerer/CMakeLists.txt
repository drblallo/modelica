modelicaAddLibrary(
        mlirlowerer SHARED
        src/passes/matching/Edge.cpp
        src/passes/matching/Flow.cpp
        src/passes/matching/LinSolver.cpp
        src/passes/matching/MatchedEquationLookup.cpp
        src/passes/matching/Matching.cpp
        src/passes/matching/SCCCollapsing.cpp
        src/passes/matching/SCCDependencyGraph.cpp
        src/passes/matching/Schedule.cpp
        src/passes/matching/SVarDependencyGraph.cpp
        src/passes/matching/VVarDependencyGraph.cpp
        src/passes/model/Constant.cpp
        src/passes/model/Equation.cpp
        src/passes/model/Expression.cpp
        src/passes/model/Model.cpp
        src/passes/model/Path.cpp
        src/passes/model/Operation.cpp
        src/passes/model/Reference.cpp
        src/passes/model/ReferenceMatcher.cpp
        src/passes/model/Variable.cpp
        src/passes/model/VectorAccess.cpp
        src/passes/AutomaticDifferentiation.cpp
        src/passes/BufferDeallocation.cpp
        src/passes/ExplicitCastInsertion.cpp
        src/passes/FunctionsScalarization.cpp
        src/passes/ModelicaConversion.cpp
        src/passes/LowerToCFG.cpp
        src/passes/LowerToLLVM.cpp
        src/passes/ResultBuffersToArgs.cpp
        src/passes/SolveModel.cpp
        src/passes/TypeConverter.cpp
        src/Attribute.cpp
        src/CodeGen.cpp
        src/ModelicaBuilder.cpp
        src/ModelicaDialect.cpp
        src/Ops.cpp
        src/Runner.cpp
        src/Type.cpp
)

target_link_libraries(
        mlirlowerer PUBLIC
        modelica::frontend
        modelica::matching
        modelica::omcToModel
        modelica::passes
        modelica::runtime
        modelica::utils
        MLIRIR
        MLIROpenMPToLLVM
        MLIROpenMPToLLVMIRTranslation
        MLIRSCF
        MLIRSCFToStandard
        MLIRSCFToOpenMP
        MLIRStandard
        MLIRStandardToLLVM
        MLIRTransforms
        MLIRTranslation
        MLIRExecutionEngine
        pthread
        boost
)

add_compile_definitions(RUNTIME_LIBRARY="$<TARGET_FILE:runtime>")
